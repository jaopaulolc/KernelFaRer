; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --scrub-attributes
; RUN: opt -passes='gemm-replacer-pass,loop-deletion,dce,simplifycfg,loop-deletion,dce,simplifycfg' --gemmfarer-replacement-mode=matrix-intrinsics -S < %s | FileCheck %s

define void @_Z14staticSizeGEMMPKfiS0_iPfiff(ptr %A, i32 %lda, ptr %B, i32 %ldb, ptr %C, i32 %ldc, float %alpha, float %beta) {
; CHECK-LABEL: @_Z14staticSizeGEMMPKfiS0_iPfiff(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = sext i32 [[LDA:%.*]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = sext i32 [[LDB:%.*]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = sext i32 [[LDC:%.*]] to i64
; CHECK-NEXT:    [[TMP3:%.*]] = call <1024 x float> @llvm.matrix.column.major.load.v1024f32.i64(ptr align 4 [[A:%.*]], i64 [[TMP0]], i1 false, i32 16, i32 64)
; CHECK-NEXT:    [[TMP4:%.*]] = call <512 x float> @llvm.matrix.column.major.load.v512f32.i64(ptr align 4 [[B:%.*]], i64 [[TMP1]], i1 false, i32 64, i32 8)
; CHECK-NEXT:    [[TMP5:%.*]] = call <128 x float> @llvm.matrix.multiply.v128f32.v1024f32.v512f32(<1024 x float> [[TMP3]], <512 x float> [[TMP4]], i32 16, i32 64, i32 8)
; CHECK-NEXT:    [[SCALAR_SPLAT_SPLATINSERT:%.*]] = insertelement <128 x float> poison, float [[ALPHA:%.*]], i32 0
; CHECK-NEXT:    [[SCALAR_SPLAT_SPLAT:%.*]] = shufflevector <128 x float> [[SCALAR_SPLAT_SPLATINSERT]], <128 x float> poison, <128 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP6:%.*]] = fmul <128 x float> [[SCALAR_SPLAT_SPLAT]], [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = call <128 x float> @llvm.matrix.column.major.load.v128f32.i64(ptr align 4 [[C:%.*]], i64 [[TMP2]], i1 false, i32 16, i32 8)
; CHECK-NEXT:    [[SCALAR_SPLAT_SPLATINSERT1:%.*]] = insertelement <128 x float> poison, float [[BETA:%.*]], i32 0
; CHECK-NEXT:    [[SCALAR_SPLAT_SPLAT2:%.*]] = shufflevector <128 x float> [[SCALAR_SPLAT_SPLATINSERT1]], <128 x float> poison, <128 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP8:%.*]] = fmul <128 x float> [[SCALAR_SPLAT_SPLAT2]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = fadd <128 x float> [[TMP6]], [[TMP8]]
; CHECK-NEXT:    call void @llvm.matrix.column.major.store.v128f32.i64(<128 x float> [[TMP9]], ptr align 4 [[C]], i64 [[TMP2]], i1 false, i32 16, i32 8)
; CHECK-NEXT:    ret void
;
entry:
  %0 = sext i32 %lda to i64
  %1 = sext i32 %ldb to i64
  %2 = sext i32 %ldc to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %entry, %for.cond.cleanup3
  %indvars.iv68 = phi i64 [ 0, %entry ], [ %indvars.iv.next69, %for.cond.cleanup3 ]
  br label %for.cond5.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
  ret void

for.cond5.preheader:                              ; preds = %for.cond1.preheader, %for.cond.cleanup7
  %indvars.iv62 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next63, %for.cond.cleanup7 ]
  %3 = mul nsw i64 %indvars.iv62, %1
  br label %for.body8

for.cond.cleanup3:                                ; preds = %for.cond.cleanup7
  %indvars.iv.next69 = add nuw nsw i64 %indvars.iv68, 1
  %exitcond70.not = icmp eq i64 %indvars.iv.next69, 16
  br i1 %exitcond70.not, label %for.cond.cleanup, label %for.cond1.preheader

for.cond.cleanup7:                                ; preds = %for.body8
  %mul15 = fmul float %add14, %alpha
  %4 = mul nsw i64 %indvars.iv62, %2
  %5 = add nsw i64 %4, %indvars.iv68
  %arrayidx19 = getelementptr inbounds float, ptr %C, i64 %5
  %6 = load float, ptr %arrayidx19, align 4
  %mul20 = fmul float %6, %beta
  %add21 = fadd float %mul15, %mul20
  store float %add21, ptr %arrayidx19, align 4
  %indvars.iv.next63 = add nuw nsw i64 %indvars.iv62, 1
  %exitcond67.not = icmp eq i64 %indvars.iv.next63, 8
  br i1 %exitcond67.not, label %for.cond.cleanup3, label %for.cond5.preheader

for.body8:                                        ; preds = %for.cond5.preheader, %for.body8
  %indvars.iv = phi i64 [ 0, %for.cond5.preheader ], [ %indvars.iv.next, %for.body8 ]
  %c.055 = phi float [ 0.000000e+00, %for.cond5.preheader ], [ %add14, %for.body8 ]
  %7 = mul nsw i64 %indvars.iv, %0
  %8 = add nsw i64 %7, %indvars.iv68
  %arrayidx = getelementptr inbounds float, ptr %A, i64 %8
  %9 = load float, ptr %arrayidx, align 4
  %10 = add nsw i64 %indvars.iv, %3
  %arrayidx12 = getelementptr inbounds float, ptr %B, i64 %10
  %11 = load float, ptr %arrayidx12, align 4
  %mul13 = fmul float %9, %11
  %add14 = fadd float %c.055, %mul13
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond.not, label %for.cond.cleanup7, label %for.body8
}
